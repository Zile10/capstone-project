CartView.vue:
<template>
  <div>
    <h1>{{ `${cart}` }}</h1>
  </div>
</template>

<script>
export default {
  computed: {
    user(){
      if (this.$store.state.user) {
        return this.$store.state.user
      } else {
        this.$store.commit('setUser', cookies.get("login_cookie").result);
        return this.$store.state.user
      }
    },
    product(){
      return this.$store.state.product
    },
    cart(){
      console.log(JSON.stringify(this.$store.state.cart));
      return this.$store.state.cart
    }
  },
  created(){
    console.log(this.$store.state.user.userID);
    console.log('User is: ', this.user);
    this.$store.dispatch('fetchCart', this.user.userID)
  }
}
</script>



Vuex store index.js:
import { createStore } from 'vuex';
import {useCookies, globalCookiesConfig} from 'vue3-cookies'
import axios from "axios";
const apiUrl = "http://localhost:6969/" // https://capstone-project-u8gz.onrender.com/
const {cookies} = useCookies();

globalCookiesConfig({
  expireTimes: "1d",
});

export default createStore({
  state: {
    product: null,
    products: null,
    user: null,
    users: null,
    cart: null,
    posts: null,
    token: null,
    isVerified: false,
    message: null,
    showSpinner: true,
  },
  getters: {
  },
  mutations: {
    setUser(state, data) {
      state.user = data;
    },
    setUsers(state, data) {
      state.users = data;
    },
    setProduct(state, data) {
      state.product = data;
    },
    setProducts(state, data) {
      state.products = data;
    },
    setSpinner(state, data) {
      state.showSpinner = data
    },
    setPosts(state, data) {
      state.posts = data
    },
    setToken(state, data) {
      state.token = data
    },
    setMessage(state, data) {
      state.message = data
    },
    setVerified(state, data) {
      state.isVerified = data
    },
    setCart(state, data) {
      state.cart = data
    }
  },
  actions: {
    // Products
    async fetchProduct(context, id) {
      const res = await axios.get(`${apiUrl}product`);
      const data = await res.data
      context.commit("setProduct", data)
    },
    async fetchProducts(context) {
      const res = await axios.get(`${apiUrl}products`);
      const data = await res.data;
      if (data !== undefined) {
        context.commit("setProducts", data);
      } else context.commit("setSpinner", true);
    },

    // Users
    async login(context, payload) {
      const res = await axios.post(`${apiUrl}users/login`, payload);
      const {result, jwToken, msg, err} = await res.data;
      if(result) {
        context.commit('setUser',result);
        context.commit('setToken', jwToken);
        cookies.set('login_cookie', res.data)
        context.commit('setMessage', msg)
      } else {
        context.commit('setMessage', err);
      }
    },
    async register(context, payload) {
      let res = await axios.post(`${apiUrl}users`, payload)
      let { msg, err } = await res.data;
      if (msg) {
        context.commit("setMessage", msg);
      } else {
        context.commit("setMessage", err)
      }
    },
    async fetchUser(context, id) {
      const res = await axios.get(`${apiUrl}user`);
      const data = await res.data
      context.commit("setUser", data)
    },
    async fetchUsers(context) {
      const res = await axios.get(`${apiUrl}users`);
      const data = await res.data;
      if (data !== undefined) {
        context.commit("setUsers", data);
      } else context.commit("setSpinner", true);
    },

    // Cart
    async fetchCart(context, {data: cartData}) {
      console.log('payload is:', cartData);
      const res = await axios.get(`${apiUrl}cart`, cartData)
      const data = await res.data;
      console.log('res is:',res);
      if (data) {
        context.commit("setCart", data);
        context.commit("setSpinner", false)
      } else context.commit(setSpinner, true)
    }
  }
})



Backend API server.js:
const path = require('path');
const express = require('express');
const cors = require('cors');
const app = express();
const bodyParser = require('body-parser')
const {userRoutes, orderRoutes, productRoutes} = require('./routes') 
require('dotenv').config
const port = process.env.PORT || 6969;

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.set('port', process.env.PORT || 3000);
app.use(express.json(), cors());

// Allowing frontend access to backend
app.use((req, res, next)=> {
  res.header('Access-Control-Allow-Origin', '*')
  res.header("Access-Control-Allow-Credentials", "true")
  res.header("Access-Control-Allow-Methods", "*")
  res.header("Access-Control-Allow-Headers", "*")
  next();
});

// Root Route
app.get('/', (req, res) => {
  res.status(200);
  res.sendFile(path.join(__dirname, '/views/index.html'));
})
// Use router to handle product and user routes
app.use('/users', userRoutes);
app.use('/products', productRoutes);
app.use('/cart', orderRoutes);


app.listen(port, () => {
  console.log('Server is running...');
  console.log(`Listening on port ${port}...`);
})



The problematic function being triggered on the backend by the 'fetchCart' on the store: 
  getOrders(req, res) {
    const orderInfo = req.body
    console.log(orderInfo);
    con.query(`SELECT * FROM orders AS o JOIN products AS p ON o.prodID = p.prodID WHERE userID = ${orderInfo};`,
    (err, result) => {
      if (err) throw err;
      res.status(200);
      res.send(result);
    });
  },



Question: Why is the 'req.body' on the backend always equal to an empty object and not the userID?